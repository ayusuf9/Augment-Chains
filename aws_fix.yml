version: 0.2
env:
  variables:
    PIPELINE_REGION: "us-east-1"
    CLUSTER_REGION: "us-east-1"
    TARGET_AWS_ACCOUNT_ID: "729149427743"

phases:
  install:
    commands:
      - echo Starting Install Phase
      - pip install -U pip
      - pip install yq jq tomlkit==0.7.2
      - cat $CODEBUILD_SRC_DIR_containerBuildArtifact/imagedefinitions.json
      - HELM_CHART_NAME=$(jq -r .helm_chart_name $CODEBUILD_SRC_DIR_containerBuildArtifact/imagedefinitions.json)
      - HELM_CHART_REPO=$(jq -r .helm_chart_repo $CODEBUILD_SRC_DIR_containerBuildArtifact/imagedefinitions.json)
      - HELM_CHART_VERSION=$(jq -r .helmChartVersion $CODEBUILD_SRC_DIR_containerBuildArtifact/imagedefinitions.json)
      - echo Installing Helm
      - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - aws ecr get-login-password --region $PIPELINE_REGION | helm registry login --username AWS --password-stdin 410997643304.dkr.ecr.us-east-1.amazonaws.com

  pre_build:
    commands:
      - echo Starting Pre-Build Phase
      # Add kubectl configuration to increase rate limits
      - |
        cat << EOF > ~/.kube/config-rate-limits
        apiVersion: v1
        kind: Config
        preferences:
          colors: true
        current-context: eks_context
        contexts:
        - context:
            cluster: eks_cluster
            user: eks_user
          name: eks_context
        clusters:
        - cluster:
            server: https://kubernetes.default.svc
            certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          name: eks_cluster
        users:
        - name: eks_user
          user:
            token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        EOF
      - export KUBECONFIG=~/.kube/config-rate-limits

  build:
    commands:
      - CLUSTER_NAME=$(yq -r .cluster_name helm-chart/dev.yaml)
      - echo "Target Cluster $CLUSTER_NAME"
      - temp_role=$(aws sts assume-role --role-arn arn:aws:iam::729149427743:role/StandardPipelineRole --role-session-name eks-session)
      - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
      - export AWS_REGION=$CLUSTER_REGION
      - aws eks update-kubeconfig --name $CLUSTER_NAME --region $CLUSTER_REGION
      
      # Check cluster access and resources
      - kubectl get nodes
      - kubectl cluster-info
      - NAMESPACE=$(yq -r .namespace helm-chart/dev.yaml)
      
      # Clean up any failed previous deployments
      - |
        if kubectl get namespace $NAMESPACE 2>/dev/null; then
          echo "Cleaning up previous deployment..."
          kubectl delete deployment -n $NAMESPACE $HELM_CHART_NAME --timeout=5m || true
          kubectl delete service -n $NAMESPACE $HELM_CHART_NAME --timeout=5m || true
          sleep 30
        fi
      
      # Pull and deploy Helm chart with retry logic
      - helm pull oci://$HELM_CHART_REPO --version $HELM_CHART_VERSION
      - |
        MAX_RETRIES=3
        RETRY_COUNT=0
        DEPLOYED=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$DEPLOYED" != "true" ]; do
          echo "Deployment attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES"
          
          helm upgrade --install $HELM_CHART_NAME ./$HELM_CHART_NAME-$HELM_CHART_VERSION.tgz \
            -f helm-chart/dev.yaml \
            --create-namespace \
            --namespace $NAMESPACE \
            --timeout 10m \
            --wait \
            --debug \
            --set resources.limits.cpu="1000m" \
            --set resources.limits.memory="4Gi" \
            --set resources.requests.cpu="250m" \
            --set resources.requests.memory="2Gi" \
            --set global.kubectl.image.pullPolicy=Always && DEPLOYED=true
          
          if [ "$DEPLOYED" != "true" ]; then
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Deployment failed. Waiting 30 seconds before retry..."
            sleep 30
          fi
        done
        
        if [ "$DEPLOYED" != "true" ]; then
          echo "All deployment attempts failed"
          exit 1
        fi

      # Verify deployment
      - |
        echo "Verifying deployment..."
        kubectl get pods -n $NAMESPACE -l app.kubernetes.io/instance=$HELM_CHART_NAME -o wide
        kubectl get services -n $NAMESPACE -l app.kubernetes.io/instance=$HELM_CHART_NAME
        kubectl get events -n $NAMESPACE --sort-by=.metadata.creationTimestamp | tail -10

  post_build:
    commands:
      - |
        echo "Deployment completed on $(date)"
        kubectl get all -n $NAMESPACE -l app.kubernetes.io/instance=$HELM_CHART_NAME